* Towards EmacsListen
Consolidating information on using voice control for Emacs.

** Purpose
Emacs, with its hackability and wide range of application, has the
potential to be the ultimate environment for voice controlled
computing.

Unfortunately, information and tools aiming to take us closer to this
goal is fragmented and oftentimes hidden away in small repositories.
This makes it hard to get running with a good setup, as getting a lay
of the land is difficult.

This repository aims to be a centralized hub consolidating information
on how one can configure Emacs to be the perfect voice controlled
environment to accomplish one's computing goals.  This ideal of Emacs
as a voice controlled environment for all computing tasks is dubbed
EmacsListen, in homage to Emacspeak, a project that made Emacs into an
audio oriented computing environment.

** Current State
The hope is that with time, this document evolves into a guide that
can get a person running with voice control in a reasonable amount of
time.

** Desiderata for EmacsListen
- Easy to set up: Getting a very basic initial setup going should be
  doable with relatively little mechanical input, so as to make setup
  as easy as possible for people suffering pain.
- Hackability: Hacking on the voice control system should be as
  comfortable and powerful as hacking on any other Emacs feature or
  configuration.  Creating ad-hoc solutions to new situations should
  be easy.
- Good citizen: As far as possible, interplay with the existing
  faculties of Emacs as nicely as possible.  For example, if voice
  commands can be made into command loop input events, this is
  preferable to having a parallel system for voice input.  In this
  way, old functionality can more easily be leveraged for voice
  control.
- Free (as in freedom): No proprietary components should be required
  to get a good voice control experience.
- Input agnostic: While EmacsListen optimizes for voice control, try
  to design the systems in a way that still would make them amenable
  for alternative input modalities.  Having a unified interface across
  modalities lowers the cognitive load when switching between them.
- Documented: A motivated person with some computer experience should
  be able to figure out how to achieve their goals in EmacsListen
  without having to dig into the code or ask for help in forums.

*** Technical desiderata
- Ability to specify the language through a formal grammar.  This
  formal grammar should increase precision by restricting what the
  speech recognition engine recognizes.
- Ability to have dynamic grammars depending on the current
  state.  This is analogous to how different keymaps are available
  depending on the state of Emacs.
- Ability to specify the grammar completely from Emacs.

** Preliminary canon
*** Speech Recognition
[[https://github.com/dictation-toolbox/dragonfly][Dragonfly]] with [[https://github.com/dictation-toolbox/dragonfly][kaldi-active-grammar]] as the backend.

**** Potential candidates for inclusion
- [[https://cmusphinx.github.io/][CMU Sphinx]] as an alternate backend.
- [[https://github.com/openai/whisper][Whisper]] for multilingual dictation.

**** Rejected candidates
- https://numenvoice.org/: Does not seem to allow grammars, just
  individual commands.
- https://serenade.ai/: Not under active maintenance.
- https://talonvoice.com: Proprietary.
- https://utterlyvoice.com/: Proprietary.
- https://www.nuance.com/dragon.html: Proprietary.

*** Generic Packages
These packages improve the voice control environment independently
of which backend is picked.

- https://github.com/ErikPrantare/hatty.el
- https://github.com/ErikPrantare/cursorfree.el
- https://github.com/jcaw/voicemacs/
  - Performs commands by creating a new input event type.  This
    approach is an example of being a good citizen: By putting the
    speech events into the command loop, things like undo boundaries
    and keyboard macros automatically work as expected.

*** Backend Specific Packages
- https://github.com/lepisma/emacs-speech-input (It seems
  they aim this to be backend-agnostic eventually)

**** CMU Sphinx
- https://github.com/cwebber/emacslisten

**** Whisper
- https://github.com/natrys/whisper.el
